#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>
#include <sys/wait.h>
#include <unistd.h>

#define MAX_COMMAND_LENGTH 100
#define MAX_ARGUMENTS 10

// Function to expand variables in the command (same as previous implementation)
void expand_variables(char* command) {
    // ... (same as before)
}

// Function to execute a single command
void execute_command(char* command) {
    // ... (same as before)
}

// Function to execute commands from a file
void execute_commands_from_file(const char* filename) {
    FILE* file = fopen(filename, "r");
    if (file == NULL) {
        perror("Error opening file");
        return;
    }

    char line[MAX_COMMAND_LENGTH];

    while (fgets(line, sizeof(line), file) != NULL) {
        // Remove newline character from the line
        line[strcspn(line, "\n")] = '\0';

        // Ignore comments in the line
        char* comment = strchr(line, '#');
        if (comment != NULL) {
            // Truncate the line at the position of the comment
            *comment = '\0';
        }

        // Expand variables in the line
        expand_variables(line);

        // Check if the line is empty (due to a comment)
        if (strlen(line) == 0) {
            continue;
        }

        // Execute the line as a command
        execute_command(line);
    }

    fclose(file);
}

int main(int argc, char* argv[]) {
    if (argc == 2) {
        // Run in file mode, execute commands from the specified file
        execute_commands_from_file(argv[1]);
    } else {
        // Run in interactive mode (same as previous implementation)
        char input[MAX_COMMAND_LENGTH];

        while (true) {
            printf("Shell> ");
            fgets(input, MAX_COMMAND_LENGTH, stdin);

            // Remove newline character from input
            input[strcspn(input, "\n")] = '\0';

            // Ignore comments in the command (same as previous implementation)
            // Expand variables in the command (same as previous implementation)
            // Execute the command (same as previous implementation)
        }
    }

    return 0;
}

